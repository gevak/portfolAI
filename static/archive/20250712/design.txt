### Portfolio Design: The Singleton Build

**Initial Load Experience**

The page first loads as a completely black screen, reminiscent of a sleek dark-mode terminal. In the top-left corner, a single, solid white cursor blinks rhythmically. After a brief moment, a single line of code begins to type itself out with a smooth, typewriter animation. The font is a modern monospace, like Fira Code or JetBrains Mono. The code itself forms the entire structure of the site's content:

`GevaKipper.buildPortfolio({ projects: [ 'GlglStats', 'AhuzatDibuk', '2DPartOrienting', 'TheTuringJest', 'RhymesOfIsrael', 'ThisPortfolio' ], contact: { github, linkedIn, facebook }});`

As the final semicolon is typed, the line of code flashes brightly for a split second. A subtle "compilation" animation triggers: the code elements rapidly shift and expand downwards, transforming into the full website layout. The background transitions gracefully from black to a sophisticated, soft off-white or very light grey, with the text turning to a dark charcoal for readability.

**Header and Page Layout**

The name **Geva Kipper** becomes the main `<h1>` heading at the top, rendered in a clean, bold sans-serif font that contrasts with the monospace aesthetic of the "code" elements. Directly beneath it, in a smaller, lighter font, is the sentence: "A software engineer at Google, focusing on large-scale data processing and machine learning infrastructure."

Below this, positioned as if it's a code comment, is the subtitle: `// This portfolio's design is regenerated by AI every 24 hours, its form ever-changing.` This text is italicized and styled in a muted grey or green, consistent with a syntax highlighting theme for comments. The entire page is contained within a single view, with the "code" structure from the initial animation remaining as the organizing principle. The main content area is visually framed by the curly braces `{}` from the original function call, subtly integrated into the page margins as large, stylized glyphs.

**Project Sections**

The seven boxes are presented in a clean, two-column grid (stacking to a single column on mobile). Each box is designed to look like a JavaScript object declaration within the larger code structure. A soft, glowing border appears around a box on hover. The content of each box uses syntax highlighting as a design language. For example, project titles are treated as object keys in one color (e.g., blue), string values like descriptions or links in another (e.g., green), and keywords like `video:` or `repo:` in a third (e.g., purple).

1.  **GlglStats:** `project_01: { name: 'GlglStats', description: 'A Python project measuring Israeli pop-song repetitiveness using LZ77 compression, complete with visualizations of musical patterns.', site: 'https://glglstats.geekip.dev', video_presentation: 'https://…' }` The links are underlined on hover and become fully colored. The video link could have a small play icon next to it.
2.  **Ahuzat Dibuk:** `project_02: { name: 'Ahuzat Dibuk', description: 'A Python scraping and data-viz project tracking Tel-Aviv parking occupancy to generate predictive heat-maps for residents.', press: [ 'https://13tv.co.il/…', 'https://mako.co.il/…' ], original_post: 'https://facebook.com/…' }` The press links are distinguished with a small newspaper icon.
3.  **2D Part Orienting:** `project_03: { name: '2D Part Orienting', description: 'C++ implementation of an efficient algorithm for constructing a "push plan" to orient any given polygon, contributed to an open-source geometry library.', code: 'https://www.cgl.cs.tau.ac.il/…' }` The code link has a `< >` icon.
4.  **The Turing Jest:** `project_04: { name: 'The Turing Jest', description: 'An LLM arena where AI models compete to generate and explain puns, with user-driven ratings and leaderboards.', site: 'https://jest.geekip.dev' }`
5.  **Rhymes of Israel:** `project_05: { name: 'Rhymes of Israel', description: 'A Chrome extension that uses an LLM to rewrite Israeli news headlines into comedic, high-school yearbook style rhymes.', install: 'https://chromewebstore.google.com/…' }` The install link features a simple puzzle-piece or browser icon.
6.  **This Portfolio:** `project_06: { name: 'Meta-Portfolio', description: 'The single-page application you are currently viewing, built from a single, animated line of JavaScript.', source_ref: 'https://geekip.dev' }` Clicking this link triggers a smooth scroll animation back to the very top of the page.
7.  **Contact:** `contact: { github: 'github.com/gevak', linkedIn: 'linkedin.com/in/gevakip', facebook: 'facebook.com/geva.kipper' }` Each link is paired with a clean, monochrome SVG icon of the respective service, which fills with color on hover.

**Footer Details**

At the very bottom of the page, below a separator styled like a dotted or dashed line from a terminal UI, the final elements reside. First, another code comment: `// Site design generated by Claude 3 Opus.` Below that, a dynamic element styled like a log output line:

`[INIT_TIMESTAMP]: 2025-07-12 01:12:55 UTC`
`[TIME_SINCE_BUILD]: 0000d 00h 00m 00s`

The "TIME_SINCE_BUILD" is a live-updating stopwatch, with the numbers constantly ticking upwards, reinforcing the idea of the site as a running process that was just "built."