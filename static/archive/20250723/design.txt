Here is the design for a unique, out-of-the-box portfolio website.

### Overall Concept: "VS Code as a Portfolio"

The entire portfolio is a single, static webpage designed to perfectly mimic the Visual Studio Code editor interface. The user doesn't just view the portfolio; they interact with it as if they are a developer browsing a project's source code. The layout is clean, dark-themed, and uses a monospaced font throughout, creating an immersive, developer-centric experience.

### The Initial View

Upon loading, the page appears as an open VS Code window. The color scheme is the classic "Dark+" theme (deep charcoal background, with vibrant blues, oranges, and greens for syntax). The font is a modern monospaced font with ligatures, like Fira Code.

On the far left is the **Activity Bar**, with a single, custom-selected icon (a stylized "GK" monogram) highlighted.

Next to it is the **Side Bar**, which displays a file explorer tree for a project named `geva-kipper-portfolio`. By default, a file named `README.md` is selected and open in the main editor pane.

### The Main Editor Pane: Content as Code

The largest area of the screen is the editor pane. Instead of traditional text blocks, all content is presented within code files, using syntax highlighting to make it engaging and scannable. Each project is a separate "file" with its own extension (`.py`, `.cpp`, `.js`), reflecting the technology used.

**Default View (`README.md`):**
This file is rendered like a previewed Markdown file within VS Code. It contains:
*   A large H1 heading: `# Geva Kipper`
*   A short description below: `Software Engineer at Google, crafting intelligent systems and user-centric solutions.`
*   An italicized subtitle in a blockquote format:
    > `This portfolio is an ever-changing experiment, re-designed in its entirety each day by a generative AI.`

**Project Sections (The "Files"):**
Clicking on a file in the Side Bar's explorer tree opens it in the main editor pane as a new tab. Each project file uses comment blocks for descriptions and simulated function calls or variable declarations for links.

1.  **File: `glglstats.py`**
    ```python
    # PROJECT: GlglStats
    """
    Measures the repetitiveness of Israeli pop-chart songs based on
    LZ77 compression and visualizes repetition patterns.
    """
    
    class Links:
        live_site = "https://glglstats.geekip.dev"  # Click to view
        pydata_talk = "https://www.youtube.com/watch?v=jrKAtOsj1Lo" # Click to watch
    ```
    The string values are the actual, clickable hyperlinks.

2.  **File: `ahuzat_dibuk.py`**
    ```python
    # PROJECT: Ahuzat Dibuk
    """
    A Python scraping and data visualization project that collects
    statistics on Tel-Aviv car parking lot occupancy, generating
    heat-maps for residents.
    """

    def view_press_coverage():
        # News Stories (Clickable)
        channel_13_news = "https://13tv.co.il/item/news/domestic/internal/parking-902956407/"
        mako_nexter = "https://www.mako.co.il/nexter-news/Article-ae43964b891bf71027.htm"
        
        # Original Viral Post
        secret_tel_aviv = "https://www.facebook.com/groups/secrettelaviv/posts/10159636301195943/"
    ```

3.  **File: `part_orienting.cpp`**
    ```cpp
    // PROJECT: 2D Part Orienting
    /*
     * C++ implementation of an efficient algorithm for constructing
     * a 'push plan' to orient a given polygon, contributed to an
     * open-source computational geometry library.
    */
    
    #include <string>
    
    std::string project_details_and_code = "https://www.cgl.cs.tau.ac.il/projects/2d-part-orienting/"; // View on CGL
    ```

4.  **File: `the_turing_jest.js`**
    ```javascript
    // PROJECT: The Turing Jest
    /**
     * An LMSYS-like arena where LLMs compete at making and
     * explaining puns. User ratings determine the funniest model.
     */

    const siteUrl = "https://jest.geekip.dev"; // Try it out
    ```

5.  **File: `rhymes_of_israel.jsx`**
    ```javascript
    // PROJECT: Rhymes of Israel (Chrome Extension)
    /**
     * This extension uses an LLM to rewrite Israeli news site
     * headlines into comedic rhymes, yearbook-style.
     */

    function installExtension() {
      // Add to Chrome
      window.open("https://chromewebstore.google.com/detail/eainginjgdkpgolpjniijdihfbeeeklb");
    }
    ```
    The entire function block is clickable.

6.  **File: `portfolio.meta.html`**
    ```html
    <!-- PROJECT: This Website -->
    <!--
      You are looking at it! A portfolio built as a VS Code extension.
      It's a single-page app designed to be as meta as possible.
    -->

    <a href="https://geekip.dev">Link to Itself (for maximum recursion)</a>
    ```

### The Side Bar: Navigation as a File Tree

The file explorer on the left serves as the main navigation menu. It's titled `> GEVAK-PORTFOLIO` and contains a list of selectable files, each with an appropriate icon (Python icon, C++ icon, JS icon, etc.).

*   `README.md`
*   `glglstats.py`
*   `ahuzat_dibuk.py`
*   `part_orienting.cpp`
*   `the_turing_jest.js`
*   `rhymes_of_israel.jsx`
*   `portfolio.meta.html`
*   `connect.json`

The last file, `connect.json`, opens to display social links:
```json
{
  "github": "github.com/gevak",
  "linkedin": "linkedin.com/in/gevakip",
  "facebook": "facebook.com/geva.kipper"
}
```
The string values are clickable, opening the respective profile in a new tab.

### The Bottom Status Bar

The blue status bar at the very bottom of the page completes the VS Code illusion and contains the final required elements.
*   **Left Side:** A Git branch icon followed by the text `main`.
*   **Right Side (from left to right):**
    1.  A small robot icon with the text `AI Credits: Designed by Claude`.
    2.  A clock icon followed by `Session Uptime:`.
    3.  A dynamic stopwatch, actively counting up in `HH:MM:SS` from `2025-07-23 01:14:13`.