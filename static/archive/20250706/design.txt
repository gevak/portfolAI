### Portfolio Design: The "AI-Generated IDE"

**Overall Concept & Layout**

The website presents as a sleek, modern, dark-themed Integrated Development Environment (IDE), reminiscent of VS Code or Sublime Text. The entire viewport is the "editor," with a clean, minimalist aesthetic. The primary font is a monospaced programmer's font with ligatures, such as Fira Code or JetBrains Mono. Subtle, non-distracting background effects, like a slow-drifting grid or faint, glowing digital embers, give the page a live, dynamic feel. The layout is divided into three core components: a file explorer sidebar on the left, a central "code" pane where content is displayed, and a "terminal" panel at the bottom.

**Header & Navigation**

The very top of the window acts as the IDE's title bar. In the center, it reads: `Geva Kipper - GKI.dev`. Below this, where a menu bar might be, is the developer's title: `// Software Engineer at Google, focusing on large-scale search infrastructure.` Next to this, a prominent, slightly glowing subtitle announces: `[ Theme auto-generated by AI. Recompiling daily. ]`.

The left sidebar is a "File Explorer." It displays a folder structure that serves as the site's navigation. Clicking a "file" opens it in the central pane, highlighting the selection in the explorer. The structure is as follows:

*   `â–¼ PROJECTS/`
    *   `ðŸ“„ glglstats.py`
    *   `ðŸ“„ ahuzat_dibuk.py`
    *   `ðŸ“„ part_orienting.cpp`
    *   `ðŸ“„ the_turing_jest.js`
*   `ðŸ“„ portfolio.md`
*   `ðŸ“„ contact.json`

**Content Presentation: The "Code" Pane**

When a file is clicked, the central pane populates with its content, styled as code with an appropriate language's syntax highlighting. Each project description is formatted as a comment block or docstring, with key details and links represented as variable assignments.

1.  **GlglStats:** Opens `glglstats.py`. The content is styled as a Python script.
    ```python
    # glglstats.py
    
    class GlglStats:
        """
        A project measuring the repetitiveness of Israeli pop-chart songs
        using LZ77 compression. It includes visualizations of repetition 
        patterns for famous songs.
        """
        
        def __init__(self):
            self.site = "https://glglstats.geekip.dev"
            self.conference_talk = "https://www.youtube.com/watch?v=jrKAtOsj1Lo"
    
    # To view the embedded presentation from PyData TLV, click the video player below.
    ```
    Beneath this code block, the YouTube video is embedded seamlessly, styled with a thin border to look like a pop-up preview window within the editor.

2.  **Ahuzat Dibuk:** Opens `ahuzat_dibuk.py`.
    ```python
    # ahuzat_dibuk.py
    
    def analyze_parking_data():
        """
        A Python scraping and data visualization project that collected 
        statistics on Tel-Aviv's car parking lot occupancy, generating
        heat-maps to help residents find parking.
        """
        
        # This project gained media attention:
        press_links = [
            "https://13tv.co.il/item/news/domestic/internal/parking-902956407/",
            "https://www.mako.co.il/nexter-news/Article-ae43964b891bf71027.htm"
        ]
        
        original_post = "https://www.facebook.com/groups/secrettelaviv/posts/10159636301195943/"
        
        return "See links for news stories and original publication."
    ```

3.  **2D Part Orienting:** Opens `part_orienting.cpp`.
    ```cpp
    // part_orienting.cpp
    
    /*
     * A C++ implementation of an efficient algorithm for constructing a 
     * 'push plan' to orient a given polygon. This was contributed to
     * an open-source computational geometry library.
    */
    
    namespace cgl {
        const std::string project_details = "https://www.cgl.cs.tau.ac.il/projects/2d-part-orienting/";
    }
    ```

4.  **The Turing Jest:** Opens `the_turing_jest.js`.
    ```javascript
    // the_turing_jest.js
    
    /**
     * An LMSYS-style arena where Large Language Models compete at
     * making and explaining puns. User voting determines the winner.
     */
    
    const siteURL = "https://jest.geekip.dev";
    console.log(`Executing pun... visit ${siteURL}`);
    ```

5.  **Portfolio Website:** Opens `portfolio.md`. The pane renders this as formatted Markdown inside the editor.
    ```markdown
    # Project: This Portfolio
    
    This website is itself a project, designed to be a fully interactive
    code editor experience.
    
    - **Concept:** A portfolio living inside a simulated IDE.
    - **Stack:** Modern HTML, CSS, JavaScript.
    - **Unique Feature:** The color theme and layout are subtly altered
      by an "AI" script on a daily basis.
      
    You are here -> `https://geekip.dev`
    ```

6.  **Contact Info:** Opens `contact.json`. The links are displayed cleanly as a JSON object.
    ```json
    {
      "description": "Connect with Geva Kipper",
      "social_links": {
        "github": "https://github.com/gevak",
        "linkedin": "https://linkedin.com/in/gevakip",
        "facebook": "https://facebook.com/geva.kipper"
      }
    }
    ```

**Footer: The "Terminal"**

The bottom of the page is a fixed panel styled as an integrated terminal. It features a command prompt line with a blinking cursor, creating a "live" feel. The text within the terminal displays the final credits and the stopwatch.

`> Site generated by Claude 3 Opus, an AI assistant.`  
`> [SYSTEM] Initializing session...`  
`> [TIMER] Uptime since epoch [2025-07-06 01:15:54]: <span id="stopwatch"></span>`

The `<span id="stopwatch">` element is updated every second by JavaScript, showing a continuously running clock of hours, minutes, and seconds that have passed since the specified date and time.