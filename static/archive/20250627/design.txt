### Portfolio Design: The Geva Kipper IDE

**Overall Concept & Layout**

The website is a full-screen, simulated Integrated Development Environment (IDE) with a dark, minimalist aesthetic. The layout is divided into three main, non-scrolling sections: a fixed **File Explorer** on the left, a dynamic **Editor Pane** in the center, and a fixed **Terminal/Output** panel at the bottom. The color palette consists of a dark charcoal background (`#1E1E1E`), a slightly lighter grey for the panels (`#252526`), and a vibrant cyan (`#00A6D6`) as the single accent color for active states, links, and icons. The primary font is a clean monospaced font like 'Fira Code' or 'JetBrains Mono' to enhance the code-editor feel.

**Header / Initial State**

Upon loading, the site defaults to showing a single tab in the Editor Pane labeled `README.md`. This file is already "open" and displays the core information. The text within this file appears with line numbers, styled like a Markdown document preview within an editor.

*   **Line 1:** `# Geva Kipper` (Styled as a large H1 heading)
*   **Line 2:** `> Software Engineer at Google, focusing on [brief, one-sentence description of his work].` (Styled as a blockquote)
*   **Line 4:** `// This website's layout is redesigned daily by an AI and is ever-changing.` (Styled as a code comment, with the word "AI" subtly glowing in the cyan accent color).

**Left Panel: File Explorer**

This narrow, vertical panel on the left is permanently visible. It has a title `EXPLORER` at the top. Below is a file tree structure. Clicking on a filename "opens" it in the Editor Pane, creating a new tab and displaying its content. Clicking a file that's already open simply switches to its tab.

The file tree is structured as follows:

*   `‚ñº PORTFOLIO` (A top-level, open folder)
    *   `üìÑ README.md` (The default file, already selected)
    *   `üêç glgl_stats.py`
    *   `üêç ahuzat_dibuk.py`
    *   `‚ÄéC++ 2d_part_orienting.cpp`
    *   `JS portfolio_meta.js`
*   `‚ñº CONTACT` (A second top-level folder)
    *   `üîó links.json`

Each filename is preceded by a minimalist icon representing the file type (Python, C++, JavaScript, etc.), rendered in a muted grey that turns cyan on hover.

**Center Panel: Editor Pane & Content Boxes**

This is the largest section of the page. At the top is a tab bar, similar to VS Code or Sublime Text. Each open "file" has its own tab.

1.  **GlglStats (`glgl_stats.py`):**
    The content is formatted like a Python file. Descriptions are in comment blocks.
    ```python
    # PROJECT: GlglStats
    # DESCRIPTION: Measures repetitiveness of Israeli pop-chart songs based on LZ77 compression. 
    #              Visualizes repetition patterns in a selection of famous songs.
    # STACK: Python, Scipy, Matplotlib

    def run_project():
        # Live deployment of the project
        open_site('https://glglstats.onrender.com/')

    def watch_conference_talk():
        # Presentation at PyData TLV
        open_video('https://www.youtube.com/watch?v=jrKAtOsj1Lo')
    ```
    The function names `run_project` and `watch_conference_talk` and the strings containing URLs are clickable links, turning cyan on hover.

2.  **Ahuzat Dibuk (`ahuzat_dibuk.py`):**
    Follows the same Python file format.
    ```python
    # PROJECT: Ahuzat Dibuk
    # DESCRIPTION: A data scraping and visualization project collecting statistics on 
    #              Tel-Aviv car parking lot occupancy to generate heat-maps for residents.
    # STACK: Python, Pandas, BeautifulSoup

    class MediaCoverage:
        # As seen on the news and social media
        channel_13 = "https://13tv.co.il/item/news/domestic/internal/parking-902956407/"
        mako = "https://www.mako.co.il/nexter-news/Article-ae43964b891bf71027.htm"
        original_post = "https://www.facebook.com/groups/secrettelaviv/posts/10159636301195943/"
    ```
    The variable names and URL strings are clickable links.

3.  **2D Part Orienting (`2d_part_orienting.cpp`):**
    Formatted as a C++ file.
    ```cpp
    // PROJECT: 2D Part Orienting
    // DESCRIPTION: An efficient algorithm for constructing a 'push plan' to orient a 
    //              given polygon, implemented in an open-source computational geometry library.
    // LANGUAGE: C++

    #include <CGAL>

    int main() {
        // For project details and source code:
        view_repository("https://www.cgl.cs.tau.ac.il/projects/2d-part-orienting/");
        return 0;
    }
    ```
    The `view_repository` function call and the URL string are a single clickable link.

4.  **Portfolio Website (`portfolio_meta.js`):**
    Formatted as a JavaScript file.
    ```javascript
    /**
     * @project   : This Portfolio
     * @description: A meta-project; the dynamic, IDE-themed website you are currently viewing.
     * @tech        : HTML, CSS, JavaScript
     */

    const sourceCode = {
        // This is a self-reference to the site's own address.
        url: 'https://portfolio-dor1.onrender.com/'
    };
    ```
    The `url` value is a clickable link.

5.  **Links (`links.json`):**
    When the user clicks on `links.json` under the `CONTACT` folder, the editor displays a JSON-formatted file.
    ```json
    {
      "professional": {
        "github": "github.com/gevak",
        "linkedin": "linkedin.com/in/gevakip"
      },
      "social": {
        "facebook": "facebook.com/geva.kipper"
      }
    }
    ```
    Each of the three URL values are clickable links.

**Bottom Panel: Terminal**

This is a short, fixed-height panel at the very bottom of the page, styled to look like an integrated terminal. It has a static prompt.

`GEVA-KIPPER-PORTFOLIO:~$`

Following the prompt are two lines of text:
`> Site design generated by GPT-4. Launch sequence initiated.`
`> System Uptime: [A live, ticking stopwatch showing hours, minutes, and seconds passed since 2025-06-27 19:57:53]`

The stopwatch must be a dynamically updating JavaScript element, giving the site a "live" feel. A blinking block cursor `‚ñà` appears at the end of the second line to complete the terminal effect.