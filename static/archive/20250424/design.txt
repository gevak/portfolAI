# Debug-driven Portfolio Design Concept

## Overall Theme
A debug console/terminal interface where the site begins with apparent "bugs" that visitors need to find and fix to reveal the complete content. The site combines a dark terminal aesthetic with modern UI elements.

## Visual Design Elements
- Dark background mimicking a code editor or terminal
- Green/amber text elements resembling terminal text
- "Bugs" visualized as pixelated glitch effects or small animated bug icons that crawl across parts of the content
- Content sections initially appear scrambled or with syntax errors until "debugged"
- Code-style formatting with line numbers, syntax highlighting

## Interaction
- Each content section has an intentional "bug" - a missing bracket, an undefined variable, a syntax error
- Visitors must find and fix these bugs by clicking on them or typing in a correction
- When fixed, the section transitions from "broken code" to polished, readable content with a satisfying animation
- A debug console at the bottom tracks visitors' progress ("3/5 bugs fixed")
- Easter eggs appear when all bugs are fixed

## Header
- Terminal-style prompt with blinking cursor showing: `> run portfolio.js`
- Name "Geva Kipper" appears with a typing animation
- Current work at Google presented as a command-line output
- Subtitle about AI redesign appears as a commented line (`// This website is re-designed each day by AI and is thus ever-changing`)
- Small terminal clock showing current time

## Content Sections
Each section appears as a code module with a "bug" to fix:

1. **GlglStats Project**: Shows broken code visualization that, when fixed, reveals a sound wave animation representing song repetitiveness, with links to the project and conference video
   
2. **Ahuzat Dibuk**: Appears as database queries with syntax errors; fixing reveals heat map visualizations and news coverage links

3. **2D Part Orienting**: Displays as C++ algorithm with missing brackets; debugging reveals geometric animations of polygon orientation

4. **Portfolio Website**: Shows as recursive function with stack overflow error; fixing reveals meta-commentary about the site itself

5. **Social Links**: Appears as broken API calls; fixing reveals animated icons for GitHub, LinkedIn, and Facebook profiles

## Footer
- Terminal-style signature crediting the AI model
- Running stopwatch displayed as a terminal process showing time since specified date
- Command prompt suggesting: `> type 'help' for more commands` (which reveals additional Easter eggs if visitors actually type "help")

## Animations
- Text appears with a typing effect
- "Fixed" content smoothly transitions from monospace terminal text to elegant typography
- Occasional terminal flicker effects
- Small animated bug sprites that scatter when clicked

## Responsive Behavior
- Mobile view simplifies to a more linear debug console
- Touch-optimized bug fixing mechanics for mobile users
- Accessibility features ensure screen readers can navigate the debugging metaphor