### Portfolio Design: The "System Breach"

**Overall Concept:** The user lands on what appears to be a locked, minimalist terminal interface. The entire experience is framed as the user successfully "breaching" a secure server to access the developer's private project files. The aesthetic is clean, dark-mode, and text-focused, with elegant animations that simulate decryption and data retrieval processes.

---

**Initial View & Header**

The page loads to a nearly black screen (#0d1117). A single, green, blinking cursor pulses in the top-left corner. After a one-second delay, text begins to type out, letter by letter, as if from a live process:

`> INITIATING_CONNECTION...`
`> AUTHENTICATION_BYPASSED.`
`> ACCESSING SECURE PAYLOAD: KIPPER_GEVA.PKG`

A thin, horizontal progress bar appears and fills rapidly from left to right. Above it, the text `[DECRYPTING CORE_IDENTITY...]` flashes. Upon completion, the bar vanishes and the following information fades into place:

**Geva Kipper**
`// Systems Engineer @ Google, focusing on large-scale infrastructure and machine learning models.`

Below this, a slightly muted, italicized line of text appears, as if it's a system alert:

*`// ALERT: This system's front-end is procedurally regenerated by an AI model daily. Visual and logical structure may vary.`*

---

**The Project "File System"**

Below the header, the main content area is presented as a grid of seven rectangular modules that resemble files in a secure directory. The grid layout is 3x2 for the projects, with the seventh "links" module centered beneath them.

Initially, each module is in a "locked" state: a dark grey box with a subtle, glowing green border. In the center of each box is a filename (e.g., `glglstats.py`), a file size (e.g., `4.2 MB`), and a status of `[ENCRYPTED]`.

**Interaction & Animation:**
*   **Hover:** When the user hovers over a module, the green border brightens, the `[ENCRYPTED]` text flickers and changes to `[DECRYPTING...]`, and a subtle, static-like glitch effect animates over the module's background.
*   **Click:** Upon clicking, the module smoothly expands to reveal its contents. This expansion is accompanied by a "decryption" animation where lines of random-looking hexadecimal or binary code quickly scroll vertically for a split second before fading out to reveal the project details.

---

**Module Content (Post-Decryption)**

Once a module is "decrypted" and expanded, the content within maintains the terminal aesthetic. It uses a clean, monospaced font. Links are styled like command-line flags (e.g., `--view-site`, `--watch-presentation`) and glow on hover.

1.  **`glglstats.py`**
    *   **Title:** GlglStats: LZ77 Music Repetitiveness Analysis
    *   **Description:** A Python project that measures the repetitiveness of Israeli pop-chart songs using LZ77 compression and visualizes lyrical patterns.
    *   **Visual:** A small, animated SVG graphic showing a waveform morphing into a colored bar pattern, representing the song's repetition.
    *   **Links:**
        *   `--view-site: https://glglstats.geekip.dev`
        *   `--watch-presentation: [PyData TLV]` (links to YouTube)

2.  **`ahuzat_dibuk.scrape`**
    *   **Title:** Ahuzat Dibuk: Tel-Aviv Parking Data
    *   **Description:** Python scraping and data visualization project that generates heat-maps of parking lot occupancy to aid residents.
    *   **Visual:** A minimalist, animated heat-map of a city block, with colors subtly shifting from cool to warm.
    *   **Links:**
        *   `--read-log: [Channel 13 News]`
        *   `--read-log: [Mako]`
        *   `--view-origin: [Facebook Publication]`

3.  **`part_orienting.cpp`**
    *   **Title:** 2D Part Orienting
    *   **Description:** A C++ implementation of an efficient algorithm for constructing a 'push plan' to orient a polygon, contributed to an open-source computational geometry library.
    *   **Visual:** A simple, wireframe animation of a complex polygon being rotated and pushed into a specific orientation within a bounding box.
    *   **Links:**
        *   `--review-code: [TAU CGL Project Page]`

4.  **`turing_jest.llm`**
    *   **Title:** The Turing Jest
    *   **Description:** An LMSYS-style arena where Large Language Models compete at generating and explaining puns, with user-based rating and leaderboards.
    *   **Visual:** An animated text cursor typing out "Why did the scarecrow win an award?" followed by "Because he was outstanding in his field," with a "rating" bar below it filling up.
    *   **Links:**
        *   `--launch-arena: https://jest.geekip.dev`

5.  **`israeli_rhymes.ext`**
    *   **Title:** Rhymes of Israel
    *   **Description:** A Chrome extension utilizing an LLM to rewrite Israeli news headlines into comedic, high-school-yearbook-style rhymes.
    *   **Visual:** An animation showing a block of generic text being "scanned" by a moving light bar, with certain words being highlighted and changed to form a rhyme.
    *   **Links:**
        *   `--install-extension: [Chrome Web Store]`

6.  **`meta_portfolio.js`**
    *   **Title:** Project: Portfolio Source
    *   **Description:** The interactive, single-page application you are currently infiltrating. A self-referential experiment in portfolio design.
    *   **Visual:** A spinning, 3D wireframe cube, representing the container of the site itself.
    *   **Links:**
        *   `--execute-self_reference: https://geekip.dev`

7.  **`contact_methods.cfg`**
    *   **Title:** Outbound Connections
    *   **Description:** Secure channels for professional and social networking.
    *   **Content:** Presented as key-value pairs in a configuration file format:
        *   `github_repo = "github.com/gevak"`
        *   `linkedin_profile = "linkedin.com/in/gevakip"`
        *   `facebook_node = "facebook.com/geva.kipper"`
    (Each value is a direct, clickable link).

---

**Footer**

The footer is clean and integrated into the terminal theme, separated by a thin, glowing line.

On the left:
`> [SHELL_LOG]: This interface was designed and rendered by OpenAI's GPT-4 model.`

On the right, a live-updating timer with a monospaced, digital-clock font:
`SYSTEM_UPTIME: 36d 14h 08m 51s`
This timer continuously counts up from 2025-07-30 01:15:21 (local time).